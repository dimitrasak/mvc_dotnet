// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvc_dotnet.Models;

#nullable disable

namespace mvc_dotnet.Migrations
{
    [DbContext(typeof(TicketServiceContext))]
    [Migration("20240128155510_provConst")]
    partial class provConst
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("mvc_dotnet.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<string>("UserUsername")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_username");

                    b.HasKey("Id");

                    b.HasIndex("UserUsername");

                    b.ToTable("admins");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<string>("Seats")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("SEATS");

                    b.Property<string>("_3d")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("3D");

                    b.HasKey("Id");

                    b.ToTable("cinemas");
                });

            modelBuilder.Entity("mvc_dotnet.Models.ContentAdmin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<string>("UserUsername")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_username");

                    b.HasKey("Id");

                    b.HasIndex("UserUsername");

                    b.ToTable("content_admin");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<string>("UserUsername")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_username");

                    b.HasKey("Id");

                    b.HasIndex("UserUsername");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("NAME");

                    b.Property<string>("Content")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("CONTENT");

                    b.Property<int?>("ContentAdminId")
                        .HasColumnType("int")
                        .HasColumnName("CONTENT_ADMIN_ID");

                    b.Property<string>("Director")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("DIRECTOR");

                    b.Property<int?>("Length")
                        .HasColumnType("int")
                        .HasColumnName("LENGTH");

                    b.Property<string>("Summary")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("SUMMARY");

                    b.Property<string>("Type")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("TYPE");

                    b.HasKey("Id", "Name");

                    b.HasIndex("ContentAdminId");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Provole", b =>
                {
                    b.Property<int>("CinemasId")
                        .HasColumnType("int")
                        .HasColumnName("CINEMAS_ID");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int")
                        .HasColumnName("MOVIES_ID");

                    b.Property<string>("MoviesName")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("MOVIES_NAME");

                    b.Property<int>("ContentAdminId")
                        .HasColumnType("int")
                        .HasColumnName("CONTENT_ADMIN_ID");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.HasKey("CinemasId", "MoviesId", "MoviesName");

                    b.HasIndex("ContentAdminId");

                    b.HasIndex("MoviesId", "MoviesName");

                    b.ToTable("provoles");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("CustomersId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMERS_ID");

                    b.Property<int?>("NumberOfSeats")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_SEATS");

                    b.Property<int?>("ProvolesCinemasId")
                        .HasColumnType("int")
                        .HasColumnName("PROVOLES_CINEMAS_ID");

                    b.Property<int?>("ProvolesContentAdminId")
                        .HasColumnType("int")
                        .HasColumnName("PROVOLES_CONTENT_ADMIN_ID");

                    b.Property<int?>("ProvolesMoviesId")
                        .HasColumnType("int")
                        .HasColumnName("PROVOLES_MOVIES_ID");

                    b.Property<string>("ProvolesMoviesName")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("PROVOLES_MOVIES_NAME");

                    b.HasKey("Id");

                    b.HasIndex("CustomersId");

                    b.HasIndex("ProvolesCinemasId", "ProvolesMoviesId", "ProvolesMoviesName");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("mvc_dotnet.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("username");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("create_time");

                    b.Property<string>("Email")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("salt");

                    b.HasKey("Username");

                    b.ToTable("user");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Admin", b =>
                {
                    b.HasOne("mvc_dotnet.Models.User", "UserUsernameNavigation")
                        .WithMany("Admins")
                        .HasForeignKey("UserUsername")
                        .HasConstraintName("FK_admins_user");

                    b.Navigation("UserUsernameNavigation");
                });

            modelBuilder.Entity("mvc_dotnet.Models.ContentAdmin", b =>
                {
                    b.HasOne("mvc_dotnet.Models.User", "UserUsernameNavigation")
                        .WithMany("ContentAdmins")
                        .HasForeignKey("UserUsername")
                        .HasConstraintName("FK_content_admin_user");

                    b.Navigation("UserUsernameNavigation");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Customer", b =>
                {
                    b.HasOne("mvc_dotnet.Models.User", "UserUsernameNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("UserUsername")
                        .HasConstraintName("FK_Table_1_user");

                    b.Navigation("UserUsernameNavigation");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Movie", b =>
                {
                    b.HasOne("mvc_dotnet.Models.ContentAdmin", "ContentAdmin")
                        .WithMany("Movies")
                        .HasForeignKey("ContentAdminId")
                        .HasConstraintName("FK_movies_content_admin");

                    b.Navigation("ContentAdmin");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Provole", b =>
                {
                    b.HasOne("mvc_dotnet.Models.Cinema", "Cinemas")
                        .WithMany("Provoles")
                        .HasForeignKey("CinemasId")
                        .IsRequired()
                        .HasConstraintName("FK_prov_cin");

                    b.HasOne("mvc_dotnet.Models.ContentAdmin", "ContentAdmin")
                        .WithMany("Provoles")
                        .HasForeignKey("ContentAdminId")
                        .IsRequired()
                        .HasConstraintName("FK_prov_content_admin");

                    b.HasOne("mvc_dotnet.Models.Movie", "Movies")
                        .WithMany("Provoles")
                        .HasForeignKey("MoviesId", "MoviesName")
                        .IsRequired()
                        .HasConstraintName("FK_prov_movies");

                    b.Navigation("Cinemas");

                    b.Navigation("ContentAdmin");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Reservation", b =>
                {
                    b.HasOne("mvc_dotnet.Models.Customer", "Customers")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomersId")
                        .HasConstraintName("FK_resrv_custom");

                    b.HasOne("mvc_dotnet.Models.Provole", "Provoles")
                        .WithMany("Reservations")
                        .HasForeignKey("ProvolesCinemasId", "ProvolesMoviesId", "ProvolesMoviesName")
                        .HasConstraintName("FK_reservations_provoles");

                    b.Navigation("Customers");

                    b.Navigation("Provoles");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Cinema", b =>
                {
                    b.Navigation("Provoles");
                });

            modelBuilder.Entity("mvc_dotnet.Models.ContentAdmin", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Provoles");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Movie", b =>
                {
                    b.Navigation("Provoles");
                });

            modelBuilder.Entity("mvc_dotnet.Models.Provole", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("mvc_dotnet.Models.User", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("ContentAdmins");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
